{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to the AI Racing League Promoting equity and innovation in AI education. The AI Racing League is a fun way to learn the concepts behind artificial intelligence! We learn AI by teaching small RC-cars to drive around a track autonomously. The cars use a low-cost Raspberry Pi (or NVIDIA Nano) with a camera. Students drive around the track and gather a set of images to \"train\" a neural network that can be used to automatically steer the car. In addition to teaching machine learning, this course also teaches concepts like Python programming, computer vision, and data science. Our curriculum is inspired by the DonkeyCar and the CoderDojo mentoring system. Our secret sauce is to combine the right hardware, software, mentors and a flexible learning curriculum to create fun events that students love to participate in. Current Status We have postponed our in-person events until after the safety issues with COVID-19 have passed. We are still working on creating new educational content and getting ready for a strong post-pandemic kickoff event in late 2021. Mission The mission of the AI Racing League is to create and deliver educational materials that will make fun AI training accessible to everyone. We place a special focus on students from disadvantaged communities including women and minorities. We work as a sub-project of the CodeSavvy not-for-profit organization and we adhere to their guidelines for quality and security of our students. This means that all our volunteers have background checks and we limit the student to mentor ratios to no more than three students per mentor. We are committed to equal opportunity mentoring. We strive to recruit, train and retain the best mentors we can find. We are inspired by the values behind the CoderDojo mentoring system and their innovative use of flexible concept cards . We attempt to publish concept cards that provide a flexible and agile training environment for a wide variety of learners. Checkout Our Site: Education Material: If you would like to teach AI Racing in the classroom, at a meetup or even in a corporation check out our resources here Resources: Want to connect or contribute to the community check us out here About us: Want to know more about us? Check us out","title":"Home"},{"location":"#welcome-to-the-ai-racing-league","text":"Promoting equity and innovation in AI education. The AI Racing League is a fun way to learn the concepts behind artificial intelligence! We learn AI by teaching small RC-cars to drive around a track autonomously. The cars use a low-cost Raspberry Pi (or NVIDIA Nano) with a camera. Students drive around the track and gather a set of images to \"train\" a neural network that can be used to automatically steer the car. In addition to teaching machine learning, this course also teaches concepts like Python programming, computer vision, and data science. Our curriculum is inspired by the DonkeyCar and the CoderDojo mentoring system. Our secret sauce is to combine the right hardware, software, mentors and a flexible learning curriculum to create fun events that students love to participate in.","title":"Welcome to the AI Racing League"},{"location":"#current-status","text":"We have postponed our in-person events until after the safety issues with COVID-19 have passed. We are still working on creating new educational content and getting ready for a strong post-pandemic kickoff event in late 2021.","title":"Current Status"},{"location":"#mission","text":"The mission of the AI Racing League is to create and deliver educational materials that will make fun AI training accessible to everyone. We place a special focus on students from disadvantaged communities including women and minorities. We work as a sub-project of the CodeSavvy not-for-profit organization and we adhere to their guidelines for quality and security of our students. This means that all our volunteers have background checks and we limit the student to mentor ratios to no more than three students per mentor. We are committed to equal opportunity mentoring. We strive to recruit, train and retain the best mentors we can find. We are inspired by the values behind the CoderDojo mentoring system and their innovative use of flexible concept cards . We attempt to publish concept cards that provide a flexible and agile training environment for a wide variety of learners.","title":"Mission"},{"location":"#checkout-our-site","text":"Education Material: If you would like to teach AI Racing in the classroom, at a meetup or even in a corporation check out our resources here Resources: Want to connect or contribute to the community check us out here About us: Want to know more about us? Check us out","title":"Checkout Our Site:"},{"location":"about/","text":"About the AI Racking League DIY Robocars is the community that kickstarted donkey into existence by hosting self driving races. There are now several meetups around the country. See diyrobocars.com to learn about events, classes, tips, projects, and instructions to build other types of cars. Checkout the Official Donkey Car Site https://www.donkeycar.com/ Coder Dojo A community of over 2,300 free, open and local programming clubs for young people 58,000 young people are being creative with technology with the help of 12,000 volunteers in 94 countries Visit https://coderdojo.com Code Savvy Code Savvy strives to make kids and teens more code-savvy through creative educational programs and services. We incubate and support community-based programs that bring technology and know-how to local kids and educators, all the while championing gender and ethnic diversity. Code Savvy is dedicated to ensuring the next generation of computer science professionals represents the billions of users of tomorrow\u2019s innovative technologies. Visit https://codesavvy.org Licensing Like all CoderDojo created content, you are free to use this content in K-12 noncommercial educational settings for teaching without paying license fees. We also encourage our community to create variations and help us enlarge the curriculum. We always appreciate attribution! Details of the license terms are here: Attribution-NonCommercial-ShareAlike 4.0 International (CC BY-NC-SA 4.0)","title":"About at ARL"},{"location":"about/#about-the-ai-racking-league","text":"DIY Robocars is the community that kickstarted donkey into existence by hosting self driving races. There are now several meetups around the country. See diyrobocars.com to learn about events, classes, tips, projects, and instructions to build other types of cars. Checkout the Official Donkey Car Site https://www.donkeycar.com/","title":"About the AI Racking League"},{"location":"about/#coder-dojo","text":"A community of over 2,300 free, open and local programming clubs for young people 58,000 young people are being creative with technology with the help of 12,000 volunteers in 94 countries Visit https://coderdojo.com","title":"Coder Dojo"},{"location":"about/#code-savvy","text":"Code Savvy strives to make kids and teens more code-savvy through creative educational programs and services. We incubate and support community-based programs that bring technology and know-how to local kids and educators, all the while championing gender and ethnic diversity. Code Savvy is dedicated to ensuring the next generation of computer science professionals represents the billions of users of tomorrow\u2019s innovative technologies. Visit https://codesavvy.org","title":"Code Savvy"},{"location":"about/#licensing","text":"Like all CoderDojo created content, you are free to use this content in K-12 noncommercial educational settings for teaching without paying license fees. We also encourage our community to create variations and help us enlarge the curriculum. We always appreciate attribution! Details of the license terms are here: Attribution-NonCommercial-ShareAlike 4.0 International (CC BY-NC-SA 4.0)","title":"Licensing"},{"location":"business-plan-2020/","text":"AI Racing League Business Plan for 2020 Summary This business plan governs the AI Racing League for the calendar year 2020. We are operating as a project within CodeSavvy. CodeSavvy is a register 501C organization. CodeSavvy's mission is to promote coding skills in youth with a focus on promoting mentoring and training for girls and disavantaged youth. Brief History The AI Racing League was founded in the summary of 2019. We were inspired by the viral global DonkeyCar project. We wondered if the DonkeyCar racing events could be used to teach AI in the classroom. The goals of the founders were to promote fun events that taught AI to girls and disavantaged youth. We recieved an initial round of $9K in funding from the Optum Technology Social Responsibility and lauched our first event in August of 2019. This event was done at the International School of Minnesota and attracted members from the AI Research community, schools, educators and students. Since August we have participated in over a dozen events promoting AI instruction. We have trained and initial set of approximatly 50 mentors that are familair with the use of the DonkeyCar Status as of January 2020 Inventory of Assets 2 GPU Servers 10 DonkeyCars AI Racing League Web Site AI Racing League Concept Cards AI Racing League Concept Dependancy Graph Documented best practices (Lessons learned, SD image inventory etc.) Miscellenous training material Marketing materials including testimonials Post on social media Goals for 2020 Financial Goals","title":"Business Plan"},{"location":"business-plan-2020/#ai-racing-league-business-plan-for-2020","text":"","title":"AI Racing League Business Plan for 2020"},{"location":"business-plan-2020/#summary","text":"This business plan governs the AI Racing League for the calendar year 2020. We are operating as a project within CodeSavvy. CodeSavvy is a register 501C organization. CodeSavvy's mission is to promote coding skills in youth with a focus on promoting mentoring and training for girls and disavantaged youth.","title":"Summary"},{"location":"business-plan-2020/#brief-history","text":"The AI Racing League was founded in the summary of 2019. We were inspired by the viral global DonkeyCar project. We wondered if the DonkeyCar racing events could be used to teach AI in the classroom. The goals of the founders were to promote fun events that taught AI to girls and disavantaged youth. We recieved an initial round of $9K in funding from the Optum Technology Social Responsibility and lauched our first event in August of 2019. This event was done at the International School of Minnesota and attracted members from the AI Research community, schools, educators and students. Since August we have participated in over a dozen events promoting AI instruction. We have trained and initial set of approximatly 50 mentors that are familair with the use of the DonkeyCar","title":"Brief History"},{"location":"business-plan-2020/#status-as-of-january-2020","text":"","title":"Status as of January 2020"},{"location":"business-plan-2020/#inventory-of-assets","text":"2 GPU Servers 10 DonkeyCars AI Racing League Web Site AI Racing League Concept Cards AI Racing League Concept Dependancy Graph Documented best practices (Lessons learned, SD image inventory etc.) Miscellenous training material Marketing materials including testimonials Post on social media","title":"Inventory of Assets"},{"location":"business-plan-2020/#goals-for-2020","text":"","title":"Goals for 2020"},{"location":"business-plan-2020/#financial-goals","text":"","title":"Financial Goals"},{"location":"car-box-checklist/","text":"AI Racing League Car Box Checklist Car Name: _ _ _ _ Mac Address: _ _ _ _ Static IP Address: _ _ _ [ ] RC Car with the following components [ ] Nvidia Nano [ ] Pi Camera Module V2 with 3D printed chassis [ ] 128GB micro SD card (inserted in Nvidia Nano) (2) [ ] RC Car Battery (7.2v NiMh) [ ] Ankar 5v 6800mHA battery with charging cable - note draws 900ma when charging [ ] RC Car Battery Charger (7.2v NiMh) [ ] 2.5 amp 5v barrel connector for desktop use of Nvidia [ ] Jumper for enabling the barrele connector [ ] WiFi Dongle (plugged into the car) [ ] Logitech F710 Joystick (dongle plugged into the car) - names on both Joystick and dongle [ ] Mouse Optional Accessories (not in the box) 1. [ ] Keyboard 1. [ ] External Monitor Nvidia Nano Serial Number: _ _ _ _____ Nvidia Nano Purchase Date: December 12, 2019","title":"Car Box Checklist"},{"location":"car-box-checklist/#ai-racing-league-car-box-checklist","text":"Car Name: _ _ _ _ Mac Address: _ _ _ _ Static IP Address: _ _ _ [ ] RC Car with the following components [ ] Nvidia Nano [ ] Pi Camera Module V2 with 3D printed chassis [ ] 128GB micro SD card (inserted in Nvidia Nano) (2) [ ] RC Car Battery (7.2v NiMh) [ ] Ankar 5v 6800mHA battery with charging cable - note draws 900ma when charging [ ] RC Car Battery Charger (7.2v NiMh) [ ] 2.5 amp 5v barrel connector for desktop use of Nvidia [ ] Jumper for enabling the barrele connector [ ] WiFi Dongle (plugged into the car) [ ] Logitech F710 Joystick (dongle plugged into the car) - names on both Joystick and dongle [ ] Mouse Optional Accessories (not in the box) 1. [ ] Keyboard 1. [ ] External Monitor Nvidia Nano Serial Number: _ _ _ _____ Nvidia Nano Purchase Date: December 12, 2019","title":"AI Racing League Car Box Checklist"},{"location":"car-parts-list/","text":"DonkeyCar Nvidia Nano Parts List We have looked at many variations of parts and decided to go with the Nvidia Nano, a TP-Link WiFi dongle and the Logitech F710 Joystick. Here are our recomended parts. We are also looking into getting the wide-angle (160 degree) cameras but we have not tested these enough. Part Name Description Price Link Note 128GB microSD card Samsung 128GB 100MB/s (U3) MicroSDXC Evo Select Memory Card with Adapter (MB-ME128GA/AM) $20 https://www.amazon.com/Samsung-MicroSD-Adapter-MB-ME128GA-AM/dp/B06XWZWYVP MicroCenter in St. Louis Park has these for about 1/2 the prices Camera Raspberry Pi Camera Module V2-8 Megapixel,1080p $30 https://www.amazon.com/Raspberry-Pi-Camera-Module-Megapixel/dp/B01ER2SKFS MUST be Module V2. The V1 will NOT work with the Nano. Dupont Connectors (F-F) EDGELEC 120pcs 20cm Dupont Wire Female to Female Breadboard Jumper Wires 3.9 inch 1pin-1pin 2.54mm Connector Multicolored Ribbon Cables DIY Arduino Wires 10 15 20 30 40 50 100cm Optional $8 for 120 https://www.amazon.com/EDGELEC-Breadboard-1pin-1pin-Connector-Multicolored/dp/B07GCY6CH7 Only need one of these Nvidia Nano Single Board Computer NVIDIA Jetson Nano Developer Kit $99 https://www.amazon.com/NVIDIA-Jetson-Nano-Developer-Kit/dp/B07PZHBDKT Ships in two days Power for Pi - 6700mAh Anker [Upgraded to 6700mAh] Astro E1 Candy-Bar Sized Ultra Compact Portable Charger, External Battery Power Bank, with High-Speed Charging PowerIQ Technology $24 https://www.amazon.com/Anker-Upgraded-Candy-Bar-High-Speed-Technology/dp/B06XS9RMWS I like this one but there are other variations. Some are rated at 10,000 mAh Power Supply for Nano SMAKN DC 5V/4A 20W Switching Power Supply Adapter 100-240 Ac(US) $10 https://www.amazon.com/SMAKN-Switching-Supply-Adapter-100-240/dp/B01N4HYWAM Note that this is a 4A 12V power supply. RC Car 1/16 2.4Ghz Exceed RC Magnet Electric Powered RTR Off Road Truck Stripe Blue NEW $119 https://www.ebay.com/itm/1-16-2-4Ghz-Exceed-RC-Magnet-Electric-Powered-RTR-Off-Road-Truck-Stripe-Blue-NEW/223337258165 E-Bay Wifi USB Dongle N150 USB wireless WiFi network Adapter for PC with SoftAP Mode - Nano Size, Compatible with Linux Kernal 2.6.18~4.4.3 (TL-WN725N) $7 https://www.amazon.com/TP-Link-TL-WN725N-wireless-network-Adapter/dp/B008IFXQFU/ I purchased one at Microcenter and it worked out-of-the-box on the Nano. The Ubuntu drivers are pre-loaded! Servo Module HiLetgo 2pcs PCA9685 16 Channel 12-Bit PWM Servo Motor Driver IIC Module for Arduino Robot $10 for 2 https://www.amazon.com/gp/product/B07BRS249H/ref=ppx_yo_dt_b_asin_title_o00_s00?ie=UTF8&psc=1 Note the quantity is 2 USB Power Cable Anker [4-Pack] Powerline Micro USB (1ft) - Charging Cable $10 for 4 https://www.amazon.com/gp/product/B015XR60MQ/ref=ppx_yo_dt_b_asin_title_o02_s00 Note the quantity is 4 but you only need one Replacement Battery 7.2V 1100mAh 6x 2/3A Rechargeable Ni-MH RC Battery Pack w/Small Tamiya Connector 10cmX3cmX1.5cm $9.88 + $2.39 Shipping https://www.ebay.com/i/183877810537 Takes several weeks to ship from China. We are looking for a local supplier. Some replacements (Airsoft guns) have reverse polarity.","title":"Cars Parts List"},{"location":"car-parts-list/#donkeycar-nvidia-nano-parts-list","text":"We have looked at many variations of parts and decided to go with the Nvidia Nano, a TP-Link WiFi dongle and the Logitech F710 Joystick. Here are our recomended parts. We are also looking into getting the wide-angle (160 degree) cameras but we have not tested these enough. Part Name Description Price Link Note 128GB microSD card Samsung 128GB 100MB/s (U3) MicroSDXC Evo Select Memory Card with Adapter (MB-ME128GA/AM) $20 https://www.amazon.com/Samsung-MicroSD-Adapter-MB-ME128GA-AM/dp/B06XWZWYVP MicroCenter in St. Louis Park has these for about 1/2 the prices Camera Raspberry Pi Camera Module V2-8 Megapixel,1080p $30 https://www.amazon.com/Raspberry-Pi-Camera-Module-Megapixel/dp/B01ER2SKFS MUST be Module V2. The V1 will NOT work with the Nano. Dupont Connectors (F-F) EDGELEC 120pcs 20cm Dupont Wire Female to Female Breadboard Jumper Wires 3.9 inch 1pin-1pin 2.54mm Connector Multicolored Ribbon Cables DIY Arduino Wires 10 15 20 30 40 50 100cm Optional $8 for 120 https://www.amazon.com/EDGELEC-Breadboard-1pin-1pin-Connector-Multicolored/dp/B07GCY6CH7 Only need one of these Nvidia Nano Single Board Computer NVIDIA Jetson Nano Developer Kit $99 https://www.amazon.com/NVIDIA-Jetson-Nano-Developer-Kit/dp/B07PZHBDKT Ships in two days Power for Pi - 6700mAh Anker [Upgraded to 6700mAh] Astro E1 Candy-Bar Sized Ultra Compact Portable Charger, External Battery Power Bank, with High-Speed Charging PowerIQ Technology $24 https://www.amazon.com/Anker-Upgraded-Candy-Bar-High-Speed-Technology/dp/B06XS9RMWS I like this one but there are other variations. Some are rated at 10,000 mAh Power Supply for Nano SMAKN DC 5V/4A 20W Switching Power Supply Adapter 100-240 Ac(US) $10 https://www.amazon.com/SMAKN-Switching-Supply-Adapter-100-240/dp/B01N4HYWAM Note that this is a 4A 12V power supply. RC Car 1/16 2.4Ghz Exceed RC Magnet Electric Powered RTR Off Road Truck Stripe Blue NEW $119 https://www.ebay.com/itm/1-16-2-4Ghz-Exceed-RC-Magnet-Electric-Powered-RTR-Off-Road-Truck-Stripe-Blue-NEW/223337258165 E-Bay Wifi USB Dongle N150 USB wireless WiFi network Adapter for PC with SoftAP Mode - Nano Size, Compatible with Linux Kernal 2.6.18~4.4.3 (TL-WN725N) $7 https://www.amazon.com/TP-Link-TL-WN725N-wireless-network-Adapter/dp/B008IFXQFU/ I purchased one at Microcenter and it worked out-of-the-box on the Nano. The Ubuntu drivers are pre-loaded! Servo Module HiLetgo 2pcs PCA9685 16 Channel 12-Bit PWM Servo Motor Driver IIC Module for Arduino Robot $10 for 2 https://www.amazon.com/gp/product/B07BRS249H/ref=ppx_yo_dt_b_asin_title_o00_s00?ie=UTF8&psc=1 Note the quantity is 2 USB Power Cable Anker [4-Pack] Powerline Micro USB (1ft) - Charging Cable $10 for 4 https://www.amazon.com/gp/product/B015XR60MQ/ref=ppx_yo_dt_b_asin_title_o02_s00 Note the quantity is 4 but you only need one Replacement Battery 7.2V 1100mAh 6x 2/3A Rechargeable Ni-MH RC Battery Pack w/Small Tamiya Connector 10cmX3cmX1.5cm $9.88 + $2.39 Shipping https://www.ebay.com/i/183877810537 Takes several weeks to ship from China. We are looking for a local supplier. Some replacements (Airsoft guns) have reverse polarity.","title":"DonkeyCar Nvidia Nano Parts List"},{"location":"contacts/","text":"AI Racing League Contacts Dan McCreary - LinkedIn","title":"Contacts"},{"location":"contacts/#ai-racing-league-contacts","text":"Dan McCreary - LinkedIn","title":"AI Racing League Contacts"},{"location":"curriculum/","text":"Curriculum We have a long term vision of using an intelligent agent that will recommend the right content for each of our students based on their current knowledge and their learning goals. Beginning (Green) Concepts Batteries Motors Donkey Car Activity Go to the donkey car station and look at the sample Donkey Car. Ask a mentor to show you the parts. Questions 1) What are the key parts of the Donkey Car? The key parts are: * RC Car chassis * Nvidia Jetson Nano * Servo controller * Camera * Battery for the Nano 2) How do the front wheels turn? A 180 degree servo is used to steer the car 3) Can you find an electric motor? There is only a single motor in the RC chassis 4) Can you find a battery? Are their multiple batteries? There are two batteries - one for the motor and one for the Jetson Nano 5) Where is the Jetson Nano (computer)? It is right on top! 6) Where is the camera? Is it on the front or back of the car? The camera is on the top facing forward 7) What happens to the opposite wheel when you turn it? The transmission makes the wheels turn in opposite direction when one wheel is turned. - Is this correct? 8) How much does a Donkey Car cost? The car costs around $250 each. The RC chassis cost about $110. 9) Why do you think they call it a \u201cDonkey Car\u201d? They call it a \"Donkey Car\" because, like a Donkey, it is functional but not very sleek. Intermediate Concepts Machine Learning Activity Go to the machine learning station and watch the demos. Ask about the difference between if-else statements and machine learning. Questions 1) What is Machine Learning? How does it differ from traditional rule-based programming? Machine learning is a method of data analysis that automates analytical model building, based on the idea that systems can learn from data. Rule-based programming is built off of if-else statements in code, and therefore every possible situation has to be thought of in advance by the programmer. Therefore, machine learning is well suited for situations where all possible inputs may not be defined. 2) How does a computer learn? The computer learns through a process called training. Training is the process of adjusting a mathematical formula by feeding it data and adjusting the formula until it produces the desired output. 3) What are the major groups of machine learning? There are 5 major groups of algorithms within machine learning. They are: * The connectionists (Neural Networks) * The analogizers (Support Vector Machines) * The Bayesians (Bayes\u2019 Theorem) * The evolutionaries (Genetic Algorithms) * The symbolists (Inverse Deduction) 4) Applications of machine learning are everywhere, what are some examples? Some applications of machine learning are: * Voice Assistants (Siri, Alexa, etc.) * Translation * Self-Driving Cars Blue Concepts Black Concepts","title":"Curriculum"},{"location":"curriculum/#curriculum","text":"We have a long term vision of using an intelligent agent that will recommend the right content for each of our students based on their current knowledge and their learning goals.","title":"Curriculum"},{"location":"curriculum/#beginning-green-concepts","text":"","title":"Beginning (Green) Concepts"},{"location":"curriculum/#batteries","text":"","title":"Batteries"},{"location":"curriculum/#motors","text":"","title":"Motors"},{"location":"curriculum/#donkey-car","text":"","title":"Donkey Car"},{"location":"curriculum/#activity","text":"Go to the donkey car station and look at the sample Donkey Car. Ask a mentor to show you the parts.","title":"Activity"},{"location":"curriculum/#questions","text":"1) What are the key parts of the Donkey Car? The key parts are: * RC Car chassis * Nvidia Jetson Nano * Servo controller * Camera * Battery for the Nano 2) How do the front wheels turn? A 180 degree servo is used to steer the car 3) Can you find an electric motor? There is only a single motor in the RC chassis 4) Can you find a battery? Are their multiple batteries? There are two batteries - one for the motor and one for the Jetson Nano 5) Where is the Jetson Nano (computer)? It is right on top! 6) Where is the camera? Is it on the front or back of the car? The camera is on the top facing forward 7) What happens to the opposite wheel when you turn it? The transmission makes the wheels turn in opposite direction when one wheel is turned. - Is this correct? 8) How much does a Donkey Car cost? The car costs around $250 each. The RC chassis cost about $110. 9) Why do you think they call it a \u201cDonkey Car\u201d? They call it a \"Donkey Car\" because, like a Donkey, it is functional but not very sleek.","title":"Questions"},{"location":"curriculum/#intermediate-concepts","text":"","title":"Intermediate Concepts"},{"location":"curriculum/#machine-learning","text":"","title":"Machine Learning"},{"location":"curriculum/#activity_1","text":"Go to the machine learning station and watch the demos. Ask about the difference between if-else statements and machine learning.","title":"Activity"},{"location":"curriculum/#questions_1","text":"1) What is Machine Learning? How does it differ from traditional rule-based programming? Machine learning is a method of data analysis that automates analytical model building, based on the idea that systems can learn from data. Rule-based programming is built off of if-else statements in code, and therefore every possible situation has to be thought of in advance by the programmer. Therefore, machine learning is well suited for situations where all possible inputs may not be defined. 2) How does a computer learn? The computer learns through a process called training. Training is the process of adjusting a mathematical formula by feeding it data and adjusting the formula until it produces the desired output. 3) What are the major groups of machine learning? There are 5 major groups of algorithms within machine learning. They are: * The connectionists (Neural Networks) * The analogizers (Support Vector Machines) * The Bayesians (Bayes\u2019 Theorem) * The evolutionaries (Genetic Algorithms) * The symbolists (Inverse Deduction) 4) Applications of machine learning are everywhere, what are some examples? Some applications of machine learning are: * Voice Assistants (Siri, Alexa, etc.) * Translation * Self-Driving Cars","title":"Questions"},{"location":"curriculum/#blue-concepts","text":"","title":"Blue Concepts"},{"location":"curriculum/#black-concepts","text":"","title":"Black Concepts"},{"location":"demo/","text":"Demos Although our students love hands-on learning with our DonkeyCars, there are other aspects of Artificial Intellice we like discuss in our classes. Here some demos we use in our classrooms. The Teachable Machine by Google This demo works with almost any PC that has a built-in video camera. You give it a set of images or pictures, or sounds and you build a model that predicts what a new images our sounds might be. This is called a \"classification\" model. Teachable Machine Much of our classroom work is centered around the hot topic of Deep Learning. But AI is much more than just Deep Learning. Here are a few other areas to consider. (Taken from the book The Master Algorithm) 5 Camps of Machine Learning Demos Connectionists (Neural Networks) Check Out TensorFlow Playground Analogizers (Support Vector Machines) TODO: FIND GOOD DEMO Bayesians (Bayes\u2019 Theorem) Check Out A Bayes' Theorem Example Evolutionaries (Genetic Algorithms) Watch This Animation Learn to Walk Symbolists (Inverse Deduction) Look at this Decision Tree Demo","title":"Demos"},{"location":"demo/#demos","text":"Although our students love hands-on learning with our DonkeyCars, there are other aspects of Artificial Intellice we like discuss in our classes. Here some demos we use in our classrooms.","title":"Demos"},{"location":"demo/#the-teachable-machine-by-google","text":"This demo works with almost any PC that has a built-in video camera. You give it a set of images or pictures, or sounds and you build a model that predicts what a new images our sounds might be. This is called a \"classification\" model. Teachable Machine Much of our classroom work is centered around the hot topic of Deep Learning. But AI is much more than just Deep Learning. Here are a few other areas to consider. (Taken from the book The Master Algorithm)","title":"The Teachable Machine by Google"},{"location":"demo/#5-camps-of-machine-learning-demos","text":"","title":"5 Camps of Machine Learning Demos"},{"location":"demo/#connectionists-neural-networks","text":"Check Out TensorFlow Playground","title":"Connectionists (Neural Networks)"},{"location":"demo/#analogizers-support-vector-machines","text":"TODO: FIND GOOD DEMO","title":"Analogizers (Support Vector Machines)"},{"location":"demo/#bayesians-bayes-theorem","text":"Check Out A Bayes' Theorem Example","title":"Bayesians (Bayes\u2019 Theorem)"},{"location":"demo/#evolutionaries-genetic-algorithms","text":"Watch This Animation Learn to Walk","title":"Evolutionaries (Genetic Algorithms)"},{"location":"demo/#symbolists-inverse-deduction","text":"Look at this Decision Tree Demo","title":"Symbolists (Inverse Deduction)"},{"location":"faqs/","text":"AI Racing League Frequently Asked Questions How much does it cost? All our events are free. However, ff you want to build your own car you are welcome to bring these to the events. Parts for a DonkeyCar typically run about $250 US. See our Car Parts Lists for details. What do I have to know before I come? Nothing! We have material for beginners without any prior knowledge of AI. What car part hardware do you use? We use mostly NVIDIA Nano and Raspberry Pi 4 for our single board computers. We use a wide variety of RC-car engines but the [Exceed Magnet] 1/16 scale RC car is a low-cost standard. See our Car Parts Lists for details. Typical car parts cost around $250 US. What GPUs do you use and how much do they cost? We use a standard PC chassis running Lunix with a NVIDIA GPU such as a GTX 2080. These PCs can be purchased for around $1,500. Se our GPU Parts List for details. How do I sign up as a student? The best way to get involved is by signing up as a student at the CoderDojo Twin Cities web site: Coderdojotc.org How do I become a mentor? The best way to get involved is by signing up as a mentor at the CoderDojo Twin Cities web site: https://www.coderdojotc.org/mentor_signup/ How do I start my own chapter of the AI Racing League Please connect with Dan McCreary on LinkedIn and indicate in the note you would like to start your own chapter. Can I get a grant to purchase hardware for our school or club? We are working on arranging a grant application process. The best way to start this process is to gather a small group of volunteers that can create a sustainable club. Include people that have a combination of fundraising, technology, education and marketing skills. Reach out to local school administration officials to build a community of science/math and STEM educators. Network with local companies that are trying to build local talent in AI and machine learning. Stay tuned for details.","title":"FAQs"},{"location":"faqs/#ai-racing-league-frequently-asked-questions","text":"","title":"AI Racing League Frequently Asked Questions"},{"location":"faqs/#how-much-does-it-cost","text":"All our events are free. However, ff you want to build your own car you are welcome to bring these to the events. Parts for a DonkeyCar typically run about $250 US. See our Car Parts Lists for details.","title":"How much does it cost?"},{"location":"faqs/#what-do-i-have-to-know-before-i-come","text":"Nothing! We have material for beginners without any prior knowledge of AI.","title":"What do I have to know before I come?"},{"location":"faqs/#what-car-part-hardware-do-you-use","text":"We use mostly NVIDIA Nano and Raspberry Pi 4 for our single board computers. We use a wide variety of RC-car engines but the [Exceed Magnet] 1/16 scale RC car is a low-cost standard. See our Car Parts Lists for details. Typical car parts cost around $250 US.","title":"What car part hardware do you use?"},{"location":"faqs/#what-gpus-do-you-use-and-how-much-do-they-cost","text":"We use a standard PC chassis running Lunix with a NVIDIA GPU such as a GTX 2080. These PCs can be purchased for around $1,500. Se our GPU Parts List for details.","title":"What GPUs do you use and how much do they cost?"},{"location":"faqs/#how-do-i-sign-up-as-a-student","text":"The best way to get involved is by signing up as a student at the CoderDojo Twin Cities web site: Coderdojotc.org","title":"How do I sign up as a student?"},{"location":"faqs/#how-do-i-become-a-mentor","text":"The best way to get involved is by signing up as a mentor at the CoderDojo Twin Cities web site: https://www.coderdojotc.org/mentor_signup/","title":"How do I become a mentor?"},{"location":"faqs/#how-do-i-start-my-own-chapter-of-the-ai-racing-league","text":"Please connect with Dan McCreary on LinkedIn and indicate in the note you would like to start your own chapter.","title":"How do I start my own chapter of the AI Racing League"},{"location":"faqs/#can-i-get-a-grant-to-purchase-hardware-for-our-school-or-club","text":"We are working on arranging a grant application process. The best way to start this process is to gather a small group of volunteers that can create a sustainable club. Include people that have a combination of fundraising, technology, education and marketing skills. Reach out to local school administration officials to build a community of science/math and STEM educators. Network with local companies that are trying to build local talent in AI and machine learning. Stay tuned for details.","title":"Can I get a grant to purchase hardware for our school or club?"},{"location":"glossary/","text":"AI Racing League Glossary of Term CoderDojo An international program of over 2,300 coding clubs that uses data-driven practices to get students interested in coding. Many of the aspects of the AI Racing League uses these same principals. Key aspects of CoderDojo are: No fees for events - accessible to all Mentor ratios of no more than three students per mentor Project-based learning Focus on getting students to work in teams (social learning) Student-directed projects Focus on programs for girls in coding and underprivileged youth Their main web site is: http://coderdojo.com/ CoderDojo Twin Cities Python Labs These labs are a set of free-courses to learn Python using fun turtle graphics. There is no experience needed. Link to CoderDojo Twin Cities Python Labs CoderDojo Twin Cities MicroPython Labs These labs are a set of free-courses to learn MicroPython. You should have a background in Python to use these labs. There are lessons in sensors, motors and robots. Link to CoderDojo Twin Cities MicroPython Labs CoderDojo Base MicroPython Robot This is a $25 robot that you build and program with MicroPython. If you are working on a project that will lead up to a full DonkeyCar, this is an ideal project to get you started. The robot will get you familiar with concepts like PWM, motor controllers and sensors. Blog article Microsite Raspberry Pi Pico MicroPython Base Robot Code Savvy Code Savvy is a not-for-profit organization with 501(c)3 status from the IRS that the AI Racing League works as a sub-project. All the AI Racing League financials are organized under a Code Savvy program. Donations to the AI Racing League should be done though Code Savvy donations. Questions about Code Savvy can be sent to kidscode@codesavvy.org Code Savvy Web Site Concept Cards These are small laminated cards that have concepts information on them that students can learn. The idea is one-concept per card. See the CoderDojo TC Guide for Authoring Concept Cards Donkey Car This is a trademarked name of a car that is used at our events. The name implies \"ugly\" so you know that they are not designed to look pretty, just functional cars with a camera on the front. DonkeyCar web site Electronic Speed Control An electronic circuit that controls and regulates the speed of an electric motor. It also can reverse the direction of the motor. Our ESC Wikipedia Page on Electronic Speed Control Fifteen Degree Camera Angle The angle our cameras need to point down to have a good view of the road ahead. Pulse Width Modulation The way that we control the [Electronic Speed Controller] (ESC) and the servo by sending digital square waves with a variable ratio of the width of the positive part of the square wave. Wikipeda Page on Pulse-width modulation Tracks We want our clubs to all have affordable but high-quality tracks that are easy to roll up and store. Our suggestion is to find used billboard vinyl in a dark color (black or dark blue) and then use white and yellow tape to place down the lines. https://billboardtarps.com/product-category/billboard-vinyl/ YouTube Video NVIDIA Nano This is the board we use in our cars. They have 4GB RAM and a GPU for accelerating real-time inference.","title":"Glossary"},{"location":"glossary/#ai-racing-league-glossary-of-term","text":"","title":"AI Racing League Glossary of Term"},{"location":"glossary/#coderdojo","text":"An international program of over 2,300 coding clubs that uses data-driven practices to get students interested in coding. Many of the aspects of the AI Racing League uses these same principals. Key aspects of CoderDojo are: No fees for events - accessible to all Mentor ratios of no more than three students per mentor Project-based learning Focus on getting students to work in teams (social learning) Student-directed projects Focus on programs for girls in coding and underprivileged youth Their main web site is: http://coderdojo.com/","title":"CoderDojo"},{"location":"glossary/#coderdojo-twin-cities-python-labs","text":"These labs are a set of free-courses to learn Python using fun turtle graphics. There is no experience needed. Link to CoderDojo Twin Cities Python Labs","title":"CoderDojo Twin Cities Python Labs"},{"location":"glossary/#coderdojo-twin-cities-micropython-labs","text":"These labs are a set of free-courses to learn MicroPython. You should have a background in Python to use these labs. There are lessons in sensors, motors and robots. Link to CoderDojo Twin Cities MicroPython Labs","title":"CoderDojo Twin Cities MicroPython Labs"},{"location":"glossary/#coderdojo-base-micropython-robot","text":"This is a $25 robot that you build and program with MicroPython. If you are working on a project that will lead up to a full DonkeyCar, this is an ideal project to get you started. The robot will get you familiar with concepts like PWM, motor controllers and sensors. Blog article Microsite Raspberry Pi Pico MicroPython Base Robot","title":"CoderDojo Base MicroPython Robot"},{"location":"glossary/#code-savvy","text":"Code Savvy is a not-for-profit organization with 501(c)3 status from the IRS that the AI Racing League works as a sub-project. All the AI Racing League financials are organized under a Code Savvy program. Donations to the AI Racing League should be done though Code Savvy donations. Questions about Code Savvy can be sent to kidscode@codesavvy.org Code Savvy Web Site","title":"Code Savvy"},{"location":"glossary/#concept-cards","text":"These are small laminated cards that have concepts information on them that students can learn. The idea is one-concept per card. See the CoderDojo TC Guide for Authoring Concept Cards","title":"Concept Cards"},{"location":"glossary/#donkey-car","text":"This is a trademarked name of a car that is used at our events. The name implies \"ugly\" so you know that they are not designed to look pretty, just functional cars with a camera on the front. DonkeyCar web site","title":"Donkey Car"},{"location":"glossary/#electronic-speed-control","text":"An electronic circuit that controls and regulates the speed of an electric motor. It also can reverse the direction of the motor. Our ESC Wikipedia Page on Electronic Speed Control","title":"Electronic Speed Control"},{"location":"glossary/#fifteen-degree-camera-angle","text":"The angle our cameras need to point down to have a good view of the road ahead.","title":"Fifteen Degree Camera Angle"},{"location":"glossary/#pulse-width-modulation","text":"The way that we control the [Electronic Speed Controller] (ESC) and the servo by sending digital square waves with a variable ratio of the width of the positive part of the square wave. Wikipeda Page on Pulse-width modulation","title":"Pulse Width Modulation"},{"location":"glossary/#tracks","text":"We want our clubs to all have affordable but high-quality tracks that are easy to roll up and store. Our suggestion is to find used billboard vinyl in a dark color (black or dark blue) and then use white and yellow tape to place down the lines. https://billboardtarps.com/product-category/billboard-vinyl/ YouTube Video","title":"Tracks"},{"location":"glossary/#nvidia-nano","text":"This is the board we use in our cars. They have 4GB RAM and a GPU for accelerating real-time inference.","title":"NVIDIA Nano"},{"location":"gpu-parts/","text":"GPU Design Goals We wanted to create a local training system that had fast training times but was portable so that we can easily carry it in a car and ship it to remote events. We can't assume any connectivity to the Internet for our events since some of them might be held in parking lots with no network access. Here are our design objectives. Fast Training Times We want students to be able to drive around a track 20 times (10 times clockwise and 10 times counterclockwise) and generate a reasonable sized data set of 20 frames per second and 224X224 images. This ends up being about 10,000 images. The sizes are a bit larger for larger tracks and slower drivers. We want to train with this data set in under five minutes. This means that we want to use a GPU card that has about 2000 CUDA cores. An example of this is the Nvidia GTX graphic cards. The RTX 2080 which currently has a list price of around $1,200. This puts the card at over half the price of our systems. A lower cost option is the RTX 2070 which has a retail list price of around $500 USD. The benchmarks for image training for these two boards were done by Dr Donald Kinghorn in March of 2019. [His analysis] (https://www.pugetsystems.com/labs/hpc/TensorFlow-Performance-with-1-4-GPUs----RTX-Titan-2080Ti-2080-2070-GTX-1660Ti-1070-1080Ti-and-Titan-V-1386/) shows that a single GTX 2080 Ti can process about 293 images per second. The GTX 2070 only does about 191 images per second. So for Small and Lightweight We originally were \"gifted\" a somewhat old GPU server used in a data center for training deep learning models. Although the sever was \"free\", it was over 70 pounds and had far more capability for RAM and power then we needed at events. Based in this experience we opted to build a much smaller system using a mini enclosure with a handle. We selected the Mini ITX Desktop Case and determined that we could still fit the GPU in this case. Rugged Must be able to take the bumps of shipping and be able to be left out in a car overnight in freezing temperatures. This was a requirement for remote events in rural Minnesota communities. We opted for a full SSD drive to keep the moving parts to a minimum. Easy to ship to remote sites We had to be able to put the unit is a remote shipping case. Visibility We wanted students to be able to look into the case and see the parts. There is a trend to also purchase RGB LED versions of components which we thought we could program to change from RED to Green during the training process as the model converges. We have not found a good API for the parts so a simple $5 LED strip on a Arduino Nano might be a better idea. See the Moving Rainbow project for sample designs. We create these at the IoT hackthons each year. Sample Parts List Fast Training Times for budget of $2,300 Jon Herke's Tiny Monster Part Name Description Price Link Note CPU AMD Ryzen 5 3600 3.6 GHz 6-Core Processor $189.99 Link Notes Motherboard Gigabyte X570 I AORUS PRO WIFI Mini ITX AM4 $219.99 Link Notes RAM Corsair Vengeance RGB Pro 32 GB (2 x 16 GB) DDR4-3200 Memory $162.99 Link Notes Storage Gigabyte AORUS NVMe Gen4 1 TB M.2-2280 NVME Solid State Drive $209.99 Link Notes Cooling be quiet! Dark Rock Pro 4, BK022, 250W TDP $89.90 https://www.amazon.com/dp/B07BY6F8D9/ref=cm_sw_r_cp_api_i_PYp-DbFCY51CH We have also used a liquid cooler but we were worried about it freezing in cold High End GPU Card NVIDIA GeForce RTX 2080 Ti 11 GB Founders Edition Video Card $1199.99 https://www.nvidia.com/en-us/geforce/graphics-cards/rtx-2080-ti/ 4000 CUDA cores makes for fast training Cost Effrective GPU Card NVIDIA GeForce RTX 2070 Ti 8 GB Founders Edition Video Card $499.99 https://www.nvidia.com/en-us/geforce/graphics-cards/rtx-2070-super/ $500 price is a lower cost alternative Case Lian Li TU150 Mini ITX Desktop Case $109.99 Link We love the handle on this small case and the glass side panel. Power Supply Corsair SF 600 W 80+ Gold Certified Fully Modular SFX Power Supply $114.99 Link Is 600W really needed? Assembly There are several good videos on YouTube that show how to assemble custom systems. You can also use a search engine to find videos for each of the parts. The Liquid coolers can be tricky to install correctly if you don't have experience. We also recommend reading the user manauals for each of the parts. They are usually on line. Drivers We used the UNIX command line to install the drivers A guide to do this is here: Installation of Nvidia Drivers on Ubuntu 18","title":"GPU Parts List"},{"location":"gpu-parts/#gpu","text":"","title":"GPU"},{"location":"gpu-parts/#design-goals","text":"We wanted to create a local training system that had fast training times but was portable so that we can easily carry it in a car and ship it to remote events. We can't assume any connectivity to the Internet for our events since some of them might be held in parking lots with no network access. Here are our design objectives.","title":"Design Goals"},{"location":"gpu-parts/#fast-training-times","text":"We want students to be able to drive around a track 20 times (10 times clockwise and 10 times counterclockwise) and generate a reasonable sized data set of 20 frames per second and 224X224 images. This ends up being about 10,000 images. The sizes are a bit larger for larger tracks and slower drivers. We want to train with this data set in under five minutes. This means that we want to use a GPU card that has about 2000 CUDA cores. An example of this is the Nvidia GTX graphic cards. The RTX 2080 which currently has a list price of around $1,200. This puts the card at over half the price of our systems. A lower cost option is the RTX 2070 which has a retail list price of around $500 USD. The benchmarks for image training for these two boards were done by Dr Donald Kinghorn in March of 2019. [His analysis] (https://www.pugetsystems.com/labs/hpc/TensorFlow-Performance-with-1-4-GPUs----RTX-Titan-2080Ti-2080-2070-GTX-1660Ti-1070-1080Ti-and-Titan-V-1386/) shows that a single GTX 2080 Ti can process about 293 images per second. The GTX 2070 only does about 191 images per second. So for","title":"Fast Training Times"},{"location":"gpu-parts/#small-and-lightweight","text":"We originally were \"gifted\" a somewhat old GPU server used in a data center for training deep learning models. Although the sever was \"free\", it was over 70 pounds and had far more capability for RAM and power then we needed at events. Based in this experience we opted to build a much smaller system using a mini enclosure with a handle. We selected the Mini ITX Desktop Case and determined that we could still fit the GPU in this case.","title":"Small and Lightweight"},{"location":"gpu-parts/#rugged","text":"Must be able to take the bumps of shipping and be able to be left out in a car overnight in freezing temperatures. This was a requirement for remote events in rural Minnesota communities. We opted for a full SSD drive to keep the moving parts to a minimum.","title":"Rugged"},{"location":"gpu-parts/#easy-to-ship-to-remote-sites","text":"We had to be able to put the unit is a remote shipping case.","title":"Easy to ship to remote sites"},{"location":"gpu-parts/#visibility","text":"We wanted students to be able to look into the case and see the parts. There is a trend to also purchase RGB LED versions of components which we thought we could program to change from RED to Green during the training process as the model converges. We have not found a good API for the parts so a simple $5 LED strip on a Arduino Nano might be a better idea. See the Moving Rainbow project for sample designs. We create these at the IoT hackthons each year.","title":"Visibility"},{"location":"gpu-parts/#sample-parts-list","text":"","title":"Sample Parts List"},{"location":"gpu-parts/#fast-training-times-for-budget-of-2300","text":"Jon Herke's Tiny Monster Part Name Description Price Link Note CPU AMD Ryzen 5 3600 3.6 GHz 6-Core Processor $189.99 Link Notes Motherboard Gigabyte X570 I AORUS PRO WIFI Mini ITX AM4 $219.99 Link Notes RAM Corsair Vengeance RGB Pro 32 GB (2 x 16 GB) DDR4-3200 Memory $162.99 Link Notes Storage Gigabyte AORUS NVMe Gen4 1 TB M.2-2280 NVME Solid State Drive $209.99 Link Notes Cooling be quiet! Dark Rock Pro 4, BK022, 250W TDP $89.90 https://www.amazon.com/dp/B07BY6F8D9/ref=cm_sw_r_cp_api_i_PYp-DbFCY51CH We have also used a liquid cooler but we were worried about it freezing in cold High End GPU Card NVIDIA GeForce RTX 2080 Ti 11 GB Founders Edition Video Card $1199.99 https://www.nvidia.com/en-us/geforce/graphics-cards/rtx-2080-ti/ 4000 CUDA cores makes for fast training Cost Effrective GPU Card NVIDIA GeForce RTX 2070 Ti 8 GB Founders Edition Video Card $499.99 https://www.nvidia.com/en-us/geforce/graphics-cards/rtx-2070-super/ $500 price is a lower cost alternative Case Lian Li TU150 Mini ITX Desktop Case $109.99 Link We love the handle on this small case and the glass side panel. Power Supply Corsair SF 600 W 80+ Gold Certified Fully Modular SFX Power Supply $114.99 Link Is 600W really needed?","title":"Fast Training Times for budget of $2,300"},{"location":"gpu-parts/#assembly","text":"There are several good videos on YouTube that show how to assemble custom systems. You can also use a search engine to find videos for each of the parts. The Liquid coolers can be tricky to install correctly if you don't have experience. We also recommend reading the user manauals for each of the parts. They are usually on line.","title":"Assembly"},{"location":"gpu-parts/#drivers","text":"We used the UNIX command line to install the drivers A guide to do this is here: Installation of Nvidia Drivers on Ubuntu 18","title":"Drivers"},{"location":"hackathon/","text":"Hackathon Ideas Here are a set of ideas that can be used to plan a Hackathon around the DonkeyCar. Of course, if people are not familiar with the DonkeyCar, just getting it to work is a good project! These are more for teams that are extending the DonkeyCar software. Beginner Projects - done in under one day Ceate a UNIX shell script for managing the tub and model files. The script should present a menu of options that includes seending one or more tubs to a server for training and getting the model file back. Bonus points for listing models and sizes. Build an RGB strip interface to display car and GPU status. The car status can move from red to green as the number of images gathered reaches a 10K image target. Use the Arduino Moving Rainbow site as your guide. Background with Arduino is helpful. Build an RGB strip interface to display the GPU training status. The RGB strip should change from red to green as the model error approaches a reasonable value like 0.01. Background with Arduino is helpful. You will also need to modify the TensorFlow interface to write error values to a serial port using python. Medium Projects - could be done with prep over a weekend Ceate a web interface for managing the tub and model files. The web interface should present a menu of options that includes seending one or more tubs to a server for training and getting the model file back. Bonus points for listing models and sizes. Create a Jypyter notebook for analysing data and managing the tub and model files. The web interface should present a menu of options that includes seending one or more tubs to a server for training and getting the model file back. Bonus points for listing models and sizes. Advanced Projects Create a mobile application to drive the car during training. This is the best practice for many low-cost robots like the MiP. Use the tilt APIs to make the car easy to steer. Create small and large versions of the DonkeyCar. The small version should work on a 12x16 track and the large version should work outdoors on grass. Use a Raspberry Pi or Nvidia Nano. Create a learning management system for running AI Racing League events. Create a list of concepts and load a dependancy list of concepts into a graph database like TigerGraph. Create a quiz that attendees use to enter their learning objectives and background. The app should then recomend what content they should use, what tables they should visit, and what mentors they should connect with in the right order. Bonus points of you build a cell phone front end. Car to GPU File Transfer Scripts Make it easy to transfer DonkeyCar test data to our GPU server. Start with a UNIX shell script that compresses the tub file and puts the data on a jump drive. Then work on using SSH to copy the files to the GPU server. Then add configuration of the Avahi application and the mDNS protocols to autodiscover the ARL GPU servers and prompte the user. Mobile App to Drive The Car Most robot systems like the MIP have a simple mobile application for driving your robot around. There are two modes: A tilt mode (where you steer by tilting the phone) and a pressure mode where you can control the speed and direction by pressing on a virtual joystick. The problem we have with the current DonkeyCar 3.X system is that the web-based application is difficult to use. The tilt mode does not work on web browsers. We suggest you use a program like AppInventor for Android or Google Flutter and Dash building mobile apps. Leaderboard Web Page Create a web application that tracks what teams are in the lead. The app should be a single-page application that allows team scores to be updated on a web form. The leaderboard can also be \"smart\" a look for the team config files on each DonkeyCar on the local-area network. OLED Extension Add a low-cost OLED screen to each car using the SPI bus. Have the OLED screen show key parameters such as hostname, static IP address, disk space free, training data size etc. Bonus points for a mode button to cycle through screens. See Dan McCreary for the hardware. LED Strips for Training Server Status Add an low-cost WS-2811-B LED strip to the GPU server. Make the strip blue when idle, red when you start training an new model, and have it fade to green as the model converges. See Dan McCreary for the hardware. Training Graph As students walk in, give them a tablet to register. It will also ask them basic questions. It will then ask them how long they will be there. It will then suggest a set of activities and some concepts to master. The graph is a dependacy graph of all the concepts we teach at the event. Also suggest a probability they will have fun at the event. Single Source Publishing for Concept Cards Our cards need to be authored in MarkDown but we want to disply on the web, in PPT and with PDF. To do this we want to adopt a single-source publishing pipeline.","title":"Hackathon"},{"location":"hackathon/#hackathon-ideas","text":"Here are a set of ideas that can be used to plan a Hackathon around the DonkeyCar. Of course, if people are not familiar with the DonkeyCar, just getting it to work is a good project! These are more for teams that are extending the DonkeyCar software.","title":"Hackathon Ideas"},{"location":"hackathon/#beginner-projects-done-in-under-one-day","text":"Ceate a UNIX shell script for managing the tub and model files. The script should present a menu of options that includes seending one or more tubs to a server for training and getting the model file back. Bonus points for listing models and sizes. Build an RGB strip interface to display car and GPU status. The car status can move from red to green as the number of images gathered reaches a 10K image target. Use the Arduino Moving Rainbow site as your guide. Background with Arduino is helpful. Build an RGB strip interface to display the GPU training status. The RGB strip should change from red to green as the model error approaches a reasonable value like 0.01. Background with Arduino is helpful. You will also need to modify the TensorFlow interface to write error values to a serial port using python.","title":"Beginner Projects - done in under one day"},{"location":"hackathon/#medium-projects-could-be-done-with-prep-over-a-weekend","text":"Ceate a web interface for managing the tub and model files. The web interface should present a menu of options that includes seending one or more tubs to a server for training and getting the model file back. Bonus points for listing models and sizes. Create a Jypyter notebook for analysing data and managing the tub and model files. The web interface should present a menu of options that includes seending one or more tubs to a server for training and getting the model file back. Bonus points for listing models and sizes.","title":"Medium Projects - could be done with prep over a weekend"},{"location":"hackathon/#advanced-projects","text":"Create a mobile application to drive the car during training. This is the best practice for many low-cost robots like the MiP. Use the tilt APIs to make the car easy to steer. Create small and large versions of the DonkeyCar. The small version should work on a 12x16 track and the large version should work outdoors on grass. Use a Raspberry Pi or Nvidia Nano. Create a learning management system for running AI Racing League events. Create a list of concepts and load a dependancy list of concepts into a graph database like TigerGraph. Create a quiz that attendees use to enter their learning objectives and background. The app should then recomend what content they should use, what tables they should visit, and what mentors they should connect with in the right order. Bonus points of you build a cell phone front end.","title":"Advanced Projects"},{"location":"hackathon/#car-to-gpu-file-transfer-scripts","text":"Make it easy to transfer DonkeyCar test data to our GPU server. Start with a UNIX shell script that compresses the tub file and puts the data on a jump drive. Then work on using SSH to copy the files to the GPU server. Then add configuration of the Avahi application and the mDNS protocols to autodiscover the ARL GPU servers and prompte the user.","title":"Car to GPU File Transfer Scripts"},{"location":"hackathon/#mobile-app-to-drive-the-car","text":"Most robot systems like the MIP have a simple mobile application for driving your robot around. There are two modes: A tilt mode (where you steer by tilting the phone) and a pressure mode where you can control the speed and direction by pressing on a virtual joystick. The problem we have with the current DonkeyCar 3.X system is that the web-based application is difficult to use. The tilt mode does not work on web browsers. We suggest you use a program like AppInventor for Android or Google Flutter and Dash building mobile apps.","title":"Mobile App to Drive The Car"},{"location":"hackathon/#leaderboard-web-page","text":"Create a web application that tracks what teams are in the lead. The app should be a single-page application that allows team scores to be updated on a web form. The leaderboard can also be \"smart\" a look for the team config files on each DonkeyCar on the local-area network.","title":"Leaderboard Web Page"},{"location":"hackathon/#oled-extension","text":"Add a low-cost OLED screen to each car using the SPI bus. Have the OLED screen show key parameters such as hostname, static IP address, disk space free, training data size etc. Bonus points for a mode button to cycle through screens. See Dan McCreary for the hardware.","title":"OLED Extension"},{"location":"hackathon/#led-strips-for-training-server-status","text":"Add an low-cost WS-2811-B LED strip to the GPU server. Make the strip blue when idle, red when you start training an new model, and have it fade to green as the model converges. See Dan McCreary for the hardware.","title":"LED Strips for Training Server Status"},{"location":"hackathon/#training-graph","text":"As students walk in, give them a tablet to register. It will also ask them basic questions. It will then ask them how long they will be there. It will then suggest a set of activities and some concepts to master. The graph is a dependacy graph of all the concepts we teach at the event. Also suggest a probability they will have fun at the event.","title":"Training Graph"},{"location":"hackathon/#single-source-publishing-for-concept-cards","text":"Our cards need to be authored in MarkDown but we want to disply on the web, in PPT and with PDF. To do this we want to adopt a single-source publishing pipeline.","title":"Single Source Publishing for Concept Cards"},{"location":"joystick/","text":"Logitec F710 Game Controller for DonkeyCar https://docs.donkeycar.com/parts/controllers/ Testing to see if the Nano Recognizes the F710 USB Dongle You can use the \"lsusb\" UNIX shell command to list all the USB devices: $ lsusb Bus 002 Device 002: ID 0bda:0411 Realtek Semiconductor Corp. Bus 002 Device 001: ID 1d6b:0003 Linux Foundation 3.0 root hub Bus 001 Device 004: ID 0bda:8179 Realtek Semiconductor Corp. RTL8188EUS 802.11n Wireless Network Adapter Bus 001 Device 005: ID 046d:c21f Logitech, Inc. F710 Wireless Gamepad [XInput Mode] Bus 001 Device 002: ID 0bda:5411 Realtek Semiconductor Corp. Bus 001 Device 001: ID 1d6b:0002 Linux Foundation 2.0 root hub Note that the USB device with an ID of 046d:c21f has been found in the 4th line above. The first ID before the colon is the device manufacturer (Logiteh) and the second is the id of their device (c21f). Linux looks this number up in their system and then loads the driver for this type of device. The driver will create a device file in the /dev/input directory called js0 $ ls -l /dev/input/js0 crw-rw-r--+ 1 root input 13, 0 Aug 16 19:30 /dev/input/js0 The \"c\" in the first letter says that this is a character I/O device. $ sudo apt-get install evtest [sudo] password for dan: Reading package lists... Done Building dependency tree Reading state information... Done The following packages were automatically installed and are no longer required: apt-clone archdetect-deb bogl-bterm busybox-static cryptsetup-bin dpkg-repack gir1.2-timezonemap-1.0 gir1.2-xkl-1.0 grub-common kde-window-manager kinit kio kpackagetool5 kwayland-data kwin-common kwin-data kwin-x11 libdebian-installer4 libkdecorations2-5v5 libkdecorations2private5v5 libkf5activities5 libkf5attica5 libkf5completion-data libkf5completion5 libkf5declarative-data libkf5declarative5 libkf5doctools5 libkf5globalaccel-data libkf5globalaccel5 libkf5globalaccelprivate5 libkf5idletime5 libkf5jobwidgets-data libkf5jobwidgets5 libkf5kcmutils-data libkf5kcmutils5 libkf5kiocore5 libkf5kiontlm5 libkf5kiowidgets5 libkf5newstuff-data libkf5newstuff5 libkf5newstuffcore5 libkf5package-data libkf5package5 libkf5plasma5 libkf5quickaddons5 libkf5solid5 libkf5solid5-data libkf5sonnet5-data libkf5sonnetcore5 libkf5sonnetui5 libkf5textwidgets-data libkf5textwidgets5 libkf5waylandclient5 libkf5waylandserver5 libkf5xmlgui-bin libkf5xmlgui-data libkf5xmlgui5 libkscreenlocker5 libkwin4-effect-builtins1 libkwineffects11 libkwinglutils11 libkwinxrenderutils11 libqgsttools-p1 libqt5designer5 libqt5help5 libqt5multimedia5 libqt5multimedia5-plugins libqt5multimediaquick-p5 libqt5multimediawidgets5 libqt5opengl5 libqt5positioning5 libqt5printsupport5 libqt5qml5 libqt5quick5 libqt5quickwidgets5 libqt5sensors5 libqt5sql5 libqt5test5 libqt5webchannel5 libqt5webkit5 libxcb-composite0 libxcb-cursor0 libxcb-damage0 os-prober python3-dbus.mainloop.pyqt5 python3-icu python3-pam python3-pyqt5 python3-pyqt5.qtsvg python3-pyqt5.qtwebkit python3-sip qml-module-org-kde-kquickcontrolsaddons qml-module-qtmultimedia qml-module-qtquick2 rdate tasksel tasksel-data Use 'sudo apt autoremove' to remove them. The following additional packages will be installed: evemu-tools libevemu3 The following NEW packages will be installed: evemu-tools evtest libevemu3 0 upgraded, 3 newly installed, 0 to remove and 7 not upgraded. Need to get 38.2 kB of archives. After this operation, 191 kB of additional disk space will be used. Do you want to continue? [Y/n] y Get:1 http://ports.ubuntu.com/ubuntu-ports bionic/universe arm64 libevemu3 arm64 2.6.0-0.1 [11.0 kB] Get:2 http://ports.ubuntu.com/ubuntu-ports bionic/universe arm64 evemu-tools arm64 2.6.0-0.1 [12.3 kB] Get:3 http://ports.ubuntu.com/ubuntu-ports bionic/universe arm64 evtest arm64 1:1.33-1build1 [14.9 kB] Fetched 38.2 kB in 1s (56.1 kB/s) debconf: delaying package configuration, since apt-utils is not installed Selecting previously unselected package libevemu3:arm64. (Reading database ... 140149 files and directories currently installed.) Preparing to unpack .../libevemu3_2.6.0-0.1_arm64.deb ... Unpacking libevemu3:arm64 (2.6.0-0.1) ... Selecting previously unselected package evemu-tools. Preparing to unpack .../evemu-tools_2.6.0-0.1_arm64.deb ... Unpacking evemu-tools (2.6.0-0.1) ... Selecting previously unselected package evtest. Preparing to unpack .../evtest_1%3a1.33-1build1_arm64.deb ... Unpacking evtest (1:1.33-1build1) ... Setting up evtest (1:1.33-1build1) ... Processing triggers for libc-bin (2.27-3ubuntu1) ... Processing triggers for man-db (2.8.3-2ubuntu0.1) ... Setting up libevemu3:arm64 (2.6.0-0.1) ... Setting up evemu-tools (2.6.0-0.1) ... Processing triggers for libc-bin (2.27-3ubuntu1) ... dan@danm-nano:~$ Now run it: $ evtest No device specified, trying to scan all of /dev/input/event* Not running as root, no devices may be available. Available devices: /dev/input/event2: Logitech Gamepad F710 Select the device event number [0-2]: 2 Logitech Gamepad F710 Input driver version is 1.0.1 Input device ID: bus 0x3 vendor 0x46d product 0xc21f version 0x305 Input device name: \"Logitech Gamepad F710\" Supported events: Event type 0 (EV_SYN) Event type 1 (EV_KEY) Event code 304 (BTN_SOUTH) Event code 305 (BTN_EAST) Event code 307 (BTN_NORTH) Event code 308 (BTN_WEST) Event code 310 (BTN_TL) Event code 311 (BTN_TR) Event code 314 (BTN_SELECT) Event code 315 (BTN_START) Event code 316 (BTN_MODE) Event code 317 (BTN_THUMBL) Event code 318 (BTN_THUMBR) Event type 3 (EV_ABS) Event code 0 (ABS_X) Value 128 Min -32768 Max 32767 Fuzz 16 Flat 128 Event code 1 (ABS_Y) Value -129 Min -32768 Max 32767 Fuzz 16 Flat 128 Event code 2 (ABS_Z) Value 0 Min 0 Max 255 Event code 3 (ABS_RX) Value 128 Min -32768 Max 32767 Fuzz 16 Flat 128 Event code 4 (ABS_RY) Value -129 Min -32768 Max 32767 Fuzz 16 Flat 128 Event code 5 (ABS_RZ) Value 0 Min 0 Max 255 Event code 16 (ABS_HAT0X) Value 0 Min -1 Max 1 Event code 17 (ABS_HAT0Y) Value 0 Min -1 Max 1 Properties: Testing ... (interrupt to exit) Now as you press any key or move any joystick you will see the events. When I press the yellow Y we see: Event: time 1566006064.962158, type 1 (EV_KEY), code 308 (BTN_WEST), value 1 Event: time 1566006064.962158, -------------- SYN_REPORT ------------ Event: time 1566006065.129981, type 1 (EV_KEY), code 308 (BTN_WEST), value 0 Event: time 1566006065.129981, -------------- SYN_REPORT ------------ Blue X Event: time 1566006110.047015, type 1 (EV_KEY), code 307 (BTN_NORTH), value 1 Event: time 1566006110.047015, -------------- SYN_REPORT ------------ Event: time 1566006110.182606, type 1 (EV_KEY), code 307 (BTN_NORTH), value 0 Event: time 1566006110.182606, -------------- SYN_REPORT ------------ Red B Event: time 1566006143.423217, type 1 (EV_KEY), code 305 (BTN_EAST), value 1 Event: time 1566006143.423217, -------------- SYN_REPORT ------------ Event: time 1566006143.499642, type 1 (EV_KEY), code 305 (BTN_EAST), value 0 Event: time 1566006143.499642, -------------- SYN_REPORT ------------ Green A Event: time 1566006184.060282, type 1 (EV_KEY), code 304 (BTN_SOUTH), value 1 Event: time 1566006184.060282, -------------- SYN_REPORT ------------ Event: time 1566006184.128408, type 1 (EV_KEY), code 304 (BTN_SOUTH), value 0 Event: time 1566006184.128408, -------------- SYN_REPORT ------------ Moving the joystick generates: Event: time 1566006255.549652, -------------- SYN_REPORT ------------ Event: time 1566006255.553650, type 3 (EV_ABS), code 1 (ABS_Y), value -10923 Event: time 1566006255.553650, -------------- SYN_REPORT ------------ Event: time 1566006255.557650, type 3 (EV_ABS), code 1 (ABS_Y), value -14264 Event: time 1566006255.557650, -------------- SYN_REPORT ------------ Event: time 1566006255.561652, type 3 (EV_ABS), code 1 (ABS_Y), value -18633","title":"Joystick"},{"location":"learning-strategy/","text":"AI Racing League Educational Philosophy The AI Racing League educational philosophy is founded on the following values: Equal Opportunity - we work hard to keep all AI Racing League activities free and we work hard to encourage girls to be part of our programs. Student driven - we ask each student what their learning goals are and adapt to their needs Project based - we prefer to let students define their own projects and we find resources to support them. If learning about how to get a car to drive by itself that is great, but if they have other objectives we work hard to connect them with the mentor that will help them build whatever they are interested in building. Teamwork - we want students to work in teams so they learn not just about AI, but how to work with others. Flexibility - we want to be known as one of the most flexible learning organizations around. We don't force everyone to learn the same things. We take students in for 20 minutes or two years. We adapt to the needs of our students and we design our curriculum around their needs. Agility - in software there is a strong concept of \"Agile Development\" where team constantly get feedback on what works and adapt their goals every two weeks to meet the needs of their users. We use these same strategies to develop flexible content to meet the ever-changing interests of our students. Our Curriculum is based around building a series of concept cards that adhere to the \"one concept per card\" rule. Each card is a 5.5in X 8in laminated card with questions or challenges on the front and answers on the back. Concept cards have three difficulty levels with different colored borders. Green Borders - Beginner cards that anyone can start with at any time Blue Borders - Intermediate - where you may need to know some beginning concepts before you start Black Borders - Advanced - where you need to master several intermediate concepts before you take these on Our goal is to keep the concepts as \"flat\" as possible without a deep level of dependency. We try to keep at least half of our cards mostly green beginner cards. Students will walk into the AI Racing League and see a stack of cards. They will pick up one card or a set of cards and work on these. When they are done they return the cards and select another set of cards. Because of our Concept Cards in Google Docs Engineering Challenges To develop a world class curriculum, we need to partner with senior engineers and curriculum developers. Here are some of the challenges we need to address. Challenge #1: Make it easy for short term learning Engineers with experience in both hardware and software can build their own DonkeyCar from parts in a few weeks, our goal is to allow students from a wide variety of backgrounds to be able to participate in events in a flexible way. A typical CoderDojo event typically only lasts two hours and students may not have the appropriate background in hardware, Python programming or UNIX. Challenge #2: On site traning hardware Many people that are building DonkeyCars use a standard Mac or PC laptop. These systems take up to two hours to train a typical model - too long for many events. One solution would be to leverage clound-based GPUs to accelerate learning. This option typically requires transferring around 1/2 GB of images up to the clound for training the models. Models, which can typically be 10MB, then need to be transferred back from the clound to the local car. Our challenge here is that many locations may not have high-bandwith uploading and downloading services that could handle this traffic. One solution is to acquire some robust GPUs that students can use to quickly train complex models - typically in 15 to 20 minutes. This hardware needs to be easy to use - for example we need to do folder-based drag and drops and press a single button to begin training.","title":"Learning Strategy"},{"location":"learning-strategy/#ai-racing-league-educational-philosophy","text":"The AI Racing League educational philosophy is founded on the following values: Equal Opportunity - we work hard to keep all AI Racing League activities free and we work hard to encourage girls to be part of our programs. Student driven - we ask each student what their learning goals are and adapt to their needs Project based - we prefer to let students define their own projects and we find resources to support them. If learning about how to get a car to drive by itself that is great, but if they have other objectives we work hard to connect them with the mentor that will help them build whatever they are interested in building. Teamwork - we want students to work in teams so they learn not just about AI, but how to work with others. Flexibility - we want to be known as one of the most flexible learning organizations around. We don't force everyone to learn the same things. We take students in for 20 minutes or two years. We adapt to the needs of our students and we design our curriculum around their needs. Agility - in software there is a strong concept of \"Agile Development\" where team constantly get feedback on what works and adapt their goals every two weeks to meet the needs of their users. We use these same strategies to develop flexible content to meet the ever-changing interests of our students. Our Curriculum is based around building a series of concept cards that adhere to the \"one concept per card\" rule. Each card is a 5.5in X 8in laminated card with questions or challenges on the front and answers on the back. Concept cards have three difficulty levels with different colored borders. Green Borders - Beginner cards that anyone can start with at any time Blue Borders - Intermediate - where you may need to know some beginning concepts before you start Black Borders - Advanced - where you need to master several intermediate concepts before you take these on Our goal is to keep the concepts as \"flat\" as possible without a deep level of dependency. We try to keep at least half of our cards mostly green beginner cards. Students will walk into the AI Racing League and see a stack of cards. They will pick up one card or a set of cards and work on these. When they are done they return the cards and select another set of cards. Because of our Concept Cards in Google Docs","title":"AI Racing League Educational Philosophy"},{"location":"learning-strategy/#engineering-challenges","text":"To develop a world class curriculum, we need to partner with senior engineers and curriculum developers. Here are some of the challenges we need to address.","title":"Engineering Challenges"},{"location":"learning-strategy/#challenge-1-make-it-easy-for-short-term-learning","text":"Engineers with experience in both hardware and software can build their own DonkeyCar from parts in a few weeks, our goal is to allow students from a wide variety of backgrounds to be able to participate in events in a flexible way. A typical CoderDojo event typically only lasts two hours and students may not have the appropriate background in hardware, Python programming or UNIX.","title":"Challenge #1: Make it easy for short term learning"},{"location":"learning-strategy/#challenge-2-on-site-traning-hardware","text":"Many people that are building DonkeyCars use a standard Mac or PC laptop. These systems take up to two hours to train a typical model - too long for many events. One solution would be to leverage clound-based GPUs to accelerate learning. This option typically requires transferring around 1/2 GB of images up to the clound for training the models. Models, which can typically be 10MB, then need to be transferred back from the clound to the local car. Our challenge here is that many locations may not have high-bandwith uploading and downloading services that could handle this traffic. One solution is to acquire some robust GPUs that students can use to quickly train complex models - typically in 15 to 20 minutes. This hardware needs to be easy to use - for example we need to do folder-based drag and drops and press a single button to begin training.","title":"Challenge #2: On site traning hardware"},{"location":"media/","text":"Media Ready, Set, Algorithms! Teams Learn AI by Racing Cars Morningstar, Liberty Mutual workers are coming up with business ideas after exploring machine learning via mini self-driving vehicles","title":"Media"},{"location":"media/#media","text":"Ready, Set, Algorithms! Teams Learn AI by Racing Cars Morningstar, Liberty Mutual workers are coming up with business ideas after exploring machine learning via mini self-driving vehicles","title":"Media"},{"location":"nano-sd-image-checklist/","text":"Nano SD Image Checklist This is a checklist that is genralized for all our events. We can't assume any network connectivity at these events. Required Image is based on the Nvidia Jetson image There is a user \"donkey\" with a password \"car\" The desktop has Chromium and Terminl locked at the top The DonkeyCar Bookmarks are in place The default WiFi is setup and working for the event (use a guest account if we are at company site?) A virtual envinroment is setup and the user is set to that automatically at the end of the .basrc script The Latest DonkeyCar software installed consistently and tested Optional Swap file setup (at least 6 gig) for compiling OpenCV The CSI Camera demo is installed from the Jetson Hacks site to test the camera and do face recognition demos The evtest program in installed to test the Logitech F710 joystick The default config.py and myconfig.py are setup and customized for the CSI camera The default image in the config.py file is 224X224 The \"desktop\" apps (word processing, spreadsheets, presentations) have been removed from the default dock The Chrome browser and the Terminal are on the dock The Chome bookmark bar is enabled (go to the Chrome Settings) The latest version of OpenCV (cv2) is installed, compiled and tested Decent python editor? Jupyter notebook support (arm version!) Sample Jupyter notebooks installed for viewing tub data and cleaning up the tub files (removing data with no speed) Unknowns Can we write a menu-driven UNIX script that will automatically copy tubs to a GPU server and get a model back? Can we assign static IP addresses and names to each car (dk1, dk2, dk3) Can we assume that ALL cars use the same default calibration? Can we write a short test script to verify that all the components are installed and working? What standards should we have for the GPU servers (Ubuntu, not RedHat) What other","title":"Nano SD Image Checklist"},{"location":"nano-sd-image-checklist/#nano-sd-image-checklist","text":"This is a checklist that is genralized for all our events. We can't assume any network connectivity at these events.","title":"Nano SD Image Checklist"},{"location":"nano-sd-image-checklist/#required","text":"Image is based on the Nvidia Jetson image There is a user \"donkey\" with a password \"car\" The desktop has Chromium and Terminl locked at the top The DonkeyCar Bookmarks are in place The default WiFi is setup and working for the event (use a guest account if we are at company site?) A virtual envinroment is setup and the user is set to that automatically at the end of the .basrc script The Latest DonkeyCar software installed consistently and tested","title":"Required"},{"location":"nano-sd-image-checklist/#optional","text":"Swap file setup (at least 6 gig) for compiling OpenCV The CSI Camera demo is installed from the Jetson Hacks site to test the camera and do face recognition demos The evtest program in installed to test the Logitech F710 joystick The default config.py and myconfig.py are setup and customized for the CSI camera The default image in the config.py file is 224X224 The \"desktop\" apps (word processing, spreadsheets, presentations) have been removed from the default dock The Chrome browser and the Terminal are on the dock The Chome bookmark bar is enabled (go to the Chrome Settings) The latest version of OpenCV (cv2) is installed, compiled and tested Decent python editor? Jupyter notebook support (arm version!) Sample Jupyter notebooks installed for viewing tub data and cleaning up the tub files (removing data with no speed)","title":"Optional"},{"location":"nano-sd-image-checklist/#unknowns","text":"Can we write a menu-driven UNIX script that will automatically copy tubs to a GPU server and get a model back? Can we assign static IP addresses and names to each car (dk1, dk2, dk3) Can we assume that ALL cars use the same default calibration? Can we write a short test script to verify that all the components are installed and working? What standards should we have for the GPU servers (Ubuntu, not RedHat) What other","title":"Unknowns"},{"location":"pi-setup/","text":"Raspberry Pi Setup Install Conda for the ARM Processor When asked: Do you wish the installer to prepend the Miniconda3 install location to PATH in your /root/.bashrc? Answer: yes 1 2 3 4 cd /tmp wget http://repo.continuum.io/miniconda/Miniconda3-latest-Linux-armv7l.sh chmod 755 Miniconda3-latest-Linux-armv7l.sh ./Miniconda3-latest-Linux-armv7l.sh Test Conda In Your PATH 1 which conda Should return: 1 /home/pi/miniconda3/bin/conda Add the Raspberry Pi Channel to Conda 1 2 conda config --add channels rpi conda install python = 3 .6 Test Python 1 python --version 1 Python 3.6.6 Create a DonkeyCar Conda Environment 1 conda create --name donkey python = 3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 The following NEW packages will be INSTALLED : ca - certificates : 2018.8.24 - 0 rpi certifi : 2018.8.24 - py36_1 rpi ncurses : 6.1 - h4f752ac_1 rpi openssl : 1.0.2 r - hdff2a78_0 rpi pip : 18.0 - py36_1 rpi python : 3.6.6 - hd0568c0_1 rpi readline : 7.0 - hcb560eb_1 rpi setuptools : 40.2.0 - py36_0 rpi sqlite : 3.24.0 - hfcb1bcf_1 rpi tk : 8.6.8 - h849d6a0_0 rpi wheel : 0.31.1 - py36_1 rpi xz : 5.2.4 - hdff2a78_1 rpi zlib : 1.2.11 - hdff2a78_1003 rpi Proceed ( [ y ]/ n ) ? y Add the conda shell to the end of our .bashrc file 1 echo \". /home/pi/miniconda3/etc/profile.d/conda.sh\" >> ~/.bashrc 1 conda activate The shell prompt should now be \"base\" Activate Your Donkey Python Environment 1 source activate donkey You should see the prompt: 1 (donkey) pi@myhost:~ $ Verify Git Is installed 1 git --version git version 2.20.1 Clone the DonkeyCar repository 1 2 3 git clone https://github.com/autorope/donkeycar cd donkeycar git checkout master 1 sudo apt-get install build-essential python3 python3-dev python3-pip python3-virtualenv python3-numpy python3-picamera python3-pandas python3-rpi.gpio i2c-tools avahi-utils joystick libopenjp2-7-dev libtiff5-dev gfortran libatlas-base-dev libopenblas-dev libhdf5-serial-dev libgeos-dev git ntp 1 sudo apt-get install libilmbase-dev libopenexr-dev libgstreamer1.0-dev libjasper-dev libwebp-dev libatlas-base-dev libavcodec-dev libavformat-dev libswscale-dev libqtgui4 libqt4-test Clone DonkeyCar Repo 1 pip freeze certifi==2018.8.24 1 2 3 git clone https://github.com/autorope/donkeycar cd donkeycar pip install -e . [ pi ]","title":"Setup Conda on Pi"},{"location":"pi-setup/#raspberry-pi-setup","text":"","title":"Raspberry Pi Setup"},{"location":"pi-setup/#install-conda-for-the-arm-processor","text":"When asked: Do you wish the installer to prepend the Miniconda3 install location to PATH in your /root/.bashrc? Answer: yes 1 2 3 4 cd /tmp wget http://repo.continuum.io/miniconda/Miniconda3-latest-Linux-armv7l.sh chmod 755 Miniconda3-latest-Linux-armv7l.sh ./Miniconda3-latest-Linux-armv7l.sh","title":"Install Conda for the ARM Processor"},{"location":"pi-setup/#test-conda-in-your-path","text":"1 which conda Should return: 1 /home/pi/miniconda3/bin/conda","title":"Test Conda In Your PATH"},{"location":"pi-setup/#add-the-raspberry-pi-channel-to-conda","text":"1 2 conda config --add channels rpi conda install python = 3 .6","title":"Add the Raspberry Pi Channel to Conda"},{"location":"pi-setup/#test-python","text":"1 python --version 1 Python 3.6.6","title":"Test Python"},{"location":"pi-setup/#create-a-donkeycar-conda-environment","text":"1 conda create --name donkey python = 3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 The following NEW packages will be INSTALLED : ca - certificates : 2018.8.24 - 0 rpi certifi : 2018.8.24 - py36_1 rpi ncurses : 6.1 - h4f752ac_1 rpi openssl : 1.0.2 r - hdff2a78_0 rpi pip : 18.0 - py36_1 rpi python : 3.6.6 - hd0568c0_1 rpi readline : 7.0 - hcb560eb_1 rpi setuptools : 40.2.0 - py36_0 rpi sqlite : 3.24.0 - hfcb1bcf_1 rpi tk : 8.6.8 - h849d6a0_0 rpi wheel : 0.31.1 - py36_1 rpi xz : 5.2.4 - hdff2a78_1 rpi zlib : 1.2.11 - hdff2a78_1003 rpi Proceed ( [ y ]/ n ) ? y","title":"Create a DonkeyCar Conda Environment"},{"location":"pi-setup/#add-the-conda-shell-to-the-end-of-our-bashrc-file","text":"1 echo \". /home/pi/miniconda3/etc/profile.d/conda.sh\" >> ~/.bashrc 1 conda activate The shell prompt should now be \"base\"","title":"Add the conda shell to the end of our .bashrc file"},{"location":"pi-setup/#activate-your-donkey-python-environment","text":"1 source activate donkey You should see the prompt: 1 (donkey) pi@myhost:~ $","title":"Activate Your Donkey Python Environment"},{"location":"pi-setup/#verify-git-is-installed","text":"1 git --version git version 2.20.1","title":"Verify Git Is installed"},{"location":"pi-setup/#clone-the-donkeycar-repository","text":"1 2 3 git clone https://github.com/autorope/donkeycar cd donkeycar git checkout master 1 sudo apt-get install build-essential python3 python3-dev python3-pip python3-virtualenv python3-numpy python3-picamera python3-pandas python3-rpi.gpio i2c-tools avahi-utils joystick libopenjp2-7-dev libtiff5-dev gfortran libatlas-base-dev libopenblas-dev libhdf5-serial-dev libgeos-dev git ntp 1 sudo apt-get install libilmbase-dev libopenexr-dev libgstreamer1.0-dev libjasper-dev libwebp-dev libatlas-base-dev libavcodec-dev libavformat-dev libswscale-dev libqtgui4 libqt4-test","title":"Clone the DonkeyCar repository"},{"location":"pi-setup/#clone-donkeycar-repo","text":"1 pip freeze certifi==2018.8.24 1 2 3 git clone https://github.com/autorope/donkeycar cd donkeycar pip install -e . [ pi ]","title":"Clone DonkeyCar Repo"},{"location":"presentations/","text":"AI Racing League Presentations These presentations are all licensed under our creative commons share alike non-commercial with attribution licenses. Welcome to the AI Racing League - slides used for the kickoff of a six week summer camp on building DonkeyCars AI Racing League Code Savvy - presented to out state Minnesota educators in April 2021 November 2019 Update - presentations done in November of 2019 after our fourth \"sprint\" making improvements on our process.","title":"List of Presentations"},{"location":"presentations/#ai-racing-league-presentations","text":"These presentations are all licensed under our creative commons share alike non-commercial with attribution licenses. Welcome to the AI Racing League - slides used for the kickoff of a six week summer camp on building DonkeyCars AI Racing League Code Savvy - presented to out state Minnesota educators in April 2021 November 2019 Update - presentations done in November of 2019 after our fourth \"sprint\" making improvements on our process.","title":"AI Racing League Presentations"},{"location":"resources/","text":"Community Here are some sites that are of interest: CoderDojo Twin Cities - where you can sign up to be a mentor or student Twin Cities AI Racing League Meetup Site - where we announce our public meetings DonkeyCar Hardware DonkeyCar web site Donkey Car Nano Setup Page Track Options In Minnesota there is a place that sells used vynil sign material. Billboard Tarps and Vinyl - We suggest you get a dark color (block or dark blue) and then tape down white edges and a yellow dashed line in the center. Hardware Options Raspberry Pi 3, 4, the Nvidia Nano, the Nvdia DX2, and the Intel Mobius Neural Stick The base DonkeyCar today uses the Raspberry Pi 3+ which has a list price of $35. This hardware is just barly able to process images in real-time. Small changes in lighting will throw the car off the track. The new Raspberry Pi 4 with 4GB RAM is a new option. The Nvidia Nano on the other hand has 128 CUDA core processors and has more than enough power to drive around a track in real time with varied lighting conditions. This is the hardware we have used for our first generation cars in the AI Racing League. There are also college-level autonomous driving teams that use the more expensive Nvidia DX2 hardware. Nvidia Nano Jetson Nano References Joseph Bastulli PyTorch Nano Nvidia Jetson Developer Kit Nvidia Jetson Nano Kaya Video Adding a Joystick to your DonkeyCar - From Dan McCreary's Blog","title":"Resources"},{"location":"resources/#community","text":"Here are some sites that are of interest: CoderDojo Twin Cities - where you can sign up to be a mentor or student Twin Cities AI Racing League Meetup Site - where we announce our public meetings","title":"Community"},{"location":"resources/#donkeycar-hardware","text":"DonkeyCar web site Donkey Car Nano Setup Page","title":"DonkeyCar Hardware"},{"location":"resources/#track-options","text":"In Minnesota there is a place that sells used vynil sign material. Billboard Tarps and Vinyl - We suggest you get a dark color (block or dark blue) and then tape down white edges and a yellow dashed line in the center.","title":"Track Options"},{"location":"resources/#hardware-options","text":"Raspberry Pi 3, 4, the Nvidia Nano, the Nvdia DX2, and the Intel Mobius Neural Stick The base DonkeyCar today uses the Raspberry Pi 3+ which has a list price of $35. This hardware is just barly able to process images in real-time. Small changes in lighting will throw the car off the track. The new Raspberry Pi 4 with 4GB RAM is a new option. The Nvidia Nano on the other hand has 128 CUDA core processors and has more than enough power to drive around a track in real time with varied lighting conditions. This is the hardware we have used for our first generation cars in the AI Racing League. There are also college-level autonomous driving teams that use the more expensive Nvidia DX2 hardware.","title":"Hardware Options"},{"location":"resources/#nvidia-nano","text":"Jetson Nano References Joseph Bastulli PyTorch Nano Nvidia Jetson Developer Kit Nvidia Jetson Nano Kaya Video Adding a Joystick to your DonkeyCar - From Dan McCreary's Blog","title":"Nvidia Nano"},{"location":"six-week-curriculum/","text":"Sample Six Week Curriculum This is a sample suggested curriculum for a six week AI Racing League summer school project. The students would all meet together for two hours, once a week. There are then homework assignments. The students don't need any prior experience. Week 1: Overview and Unboxing Slides: Welcome to the AI Racing League? Link to Slides What is the DonkeyCar? Lab: Unbox the car (requires tools such as cable tie cutter and screwdrivers) What is AI? What is Machine Learning? What is Python? Introduction to Python course Motors and servos (demo of car driving with the motors and servos being controlled by RC) Make sure students know how to turn on the ESC and listen for the startup beep sound See the suggested parts list for week 1 Week 2: Booting a Raspberry Pi, UNIX, Calibration, Intro to Python and Raspberry Pi Booting a Raspberry Pi from Micro SD card What is a Raspberry Pi? How much RAM do we need? Why is 4GB important for the AI Racing League? What is a micro SD card? How big a card do we need? 32GB vs 65GB vs 128GB Can we train our model on a Pi? Training vs. Inference - when do we need a GPU? What is an Operating System Image file? How do we create an image file? Download a Raspberry Pi image Raspberry Pi Imager Burn a microSD card with that image - include customization Use the microSD card to boot your Raspberry Pi (requires 4GB Raspberry Pi Pico, keyboard, mouse, power supply, monitor) Configure Pi desktop - learn how to use menus, add bookmarks to the web browser, manage bookmarks Start Python IDE Run \"hello world\" in Python Open a Terminal and type \"ls\" Download the DonkeyCar software Get familiar with the folder layout Verify the connections from the Pi to the PWM card and the DonkeyCar Run the calibration command, write down the numbers for throttle and steering Week 3: Python, Configuration, Drive More Python labs - get as far as possible through the Introduction to Python class Get familiar with the Donkey Car configuration file Focus on the key parameters for calibration Find the Drive command Discuss options for controlling the car: Joystick vs Web Application Backup Career Exploration: What is a Software Engineer? Backup Lab: Google Teachable Machines Week 4: Gather Image Data and Analyze Quality with Jupyter Notebooks Drive around the track and gather image data Look at the image data in the tubs Run a basic Python program to count the number of files Learn about a Jupyter Notebook Backup Career Exploration: What is a Data Scientist? Week 5: The GPU and Training Learn about the GPU - what are GPU cores? - Why is training time faster? What is a conda environment for Python? What is Miniconda Download here Activating conda environments Verifying that the GPU setting are correct Run a test program on the GPU Learn how to transfer files from the car's memory to the GPU (compress tubs, copy to jump drive) What is a model file? How big is your model? What are model parameters? Backup: What is Bias in AI? How to we detect it? How dow we measure it? Week 6: Using the Model to Drive Autonomously Put the model file on the Donkey car Run the drive with model command Change the configuration files Evaluate image quality","title":"Sample Six Week Course"},{"location":"six-week-curriculum/#sample-six-week-curriculum","text":"This is a sample suggested curriculum for a six week AI Racing League summer school project. The students would all meet together for two hours, once a week. There are then homework assignments. The students don't need any prior experience.","title":"Sample Six Week Curriculum"},{"location":"six-week-curriculum/#week-1-overview-and-unboxing","text":"Slides: Welcome to the AI Racing League? Link to Slides What is the DonkeyCar? Lab: Unbox the car (requires tools such as cable tie cutter and screwdrivers) What is AI? What is Machine Learning? What is Python? Introduction to Python course Motors and servos (demo of car driving with the motors and servos being controlled by RC) Make sure students know how to turn on the ESC and listen for the startup beep sound See the suggested parts list for week 1","title":"Week 1: Overview and Unboxing"},{"location":"six-week-curriculum/#week-2-booting-a-raspberry-pi-unix-calibration-intro-to-python-and-raspberry-pi","text":"Booting a Raspberry Pi from Micro SD card What is a Raspberry Pi? How much RAM do we need? Why is 4GB important for the AI Racing League? What is a micro SD card? How big a card do we need? 32GB vs 65GB vs 128GB Can we train our model on a Pi? Training vs. Inference - when do we need a GPU? What is an Operating System Image file? How do we create an image file? Download a Raspberry Pi image Raspberry Pi Imager Burn a microSD card with that image - include customization Use the microSD card to boot your Raspberry Pi (requires 4GB Raspberry Pi Pico, keyboard, mouse, power supply, monitor) Configure Pi desktop - learn how to use menus, add bookmarks to the web browser, manage bookmarks Start Python IDE Run \"hello world\" in Python Open a Terminal and type \"ls\" Download the DonkeyCar software Get familiar with the folder layout Verify the connections from the Pi to the PWM card and the DonkeyCar Run the calibration command, write down the numbers for throttle and steering","title":"Week 2: Booting a Raspberry Pi, UNIX, Calibration, Intro to Python and Raspberry Pi"},{"location":"six-week-curriculum/#week-3-python-configuration-drive","text":"More Python labs - get as far as possible through the Introduction to Python class Get familiar with the Donkey Car configuration file Focus on the key parameters for calibration Find the Drive command Discuss options for controlling the car: Joystick vs Web Application Backup Career Exploration: What is a Software Engineer? Backup Lab: Google Teachable Machines","title":"Week 3: Python, Configuration, Drive"},{"location":"six-week-curriculum/#week-4-gather-image-data-and-analyze-quality-with-jupyter-notebooks","text":"Drive around the track and gather image data Look at the image data in the tubs Run a basic Python program to count the number of files Learn about a Jupyter Notebook Backup Career Exploration: What is a Data Scientist?","title":"Week 4: Gather Image Data and Analyze Quality with Jupyter Notebooks"},{"location":"six-week-curriculum/#week-5-the-gpu-and-training","text":"Learn about the GPU - what are GPU cores? - Why is training time faster? What is a conda environment for Python? What is Miniconda Download here Activating conda environments Verifying that the GPU setting are correct Run a test program on the GPU Learn how to transfer files from the car's memory to the GPU (compress tubs, copy to jump drive) What is a model file? How big is your model? What are model parameters? Backup: What is Bias in AI? How to we detect it? How dow we measure it?","title":"Week 5: The GPU and Training"},{"location":"six-week-curriculum/#week-6-using-the-model-to-drive-autonomously","text":"Put the model file on the Donkey car Run the drive with model command Change the configuration files Evaluate image quality","title":"Week 6: Using the Model to Drive Autonomously"}]}